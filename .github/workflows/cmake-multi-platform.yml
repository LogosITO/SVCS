name: CMake Multi-Platform CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Debug, Release]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install System Prerequisites
      if: runner.os != 'Windows'
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf automake libtool pkg-config m4 \
            linux-libc-dev curl wget tar gzip gettext libgettextpo-dev libffi-dev \
            libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \
            libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev \
            liblzma-dev python3-dev python3-pip
        elif [ "${{ runner.os }}" == "macOS" ]; then
          brew install autoconf automake libtool pkg-config gettext
          brew link --force gettext
        fi

    - name: Install Windows Prerequisites
      if: runner.os == 'Windows'
      run: |
        choco install python -y

    - name: Setup Vcpkg
      shell: bash
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        if [ "${{ runner.os }}" == "Windows" ]; then
          ./vcpkg/bootstrap-vcpkg.bat -disableMetrics
        else
          ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
        fi

    - name: Install Dependencies
      shell: bash
      run: |
        ./vcpkg/vcpkg install --clean-after-build

    - name: Configure CMake
      run: |
        cmake -S ${{ github.workspace }} -B ${{ github.workspace }}/build \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

    - name: Build Project
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --parallel
      
    - name: Run Tests
      run: ctest --test-dir ${{ github.workspace }}/build -C ${{ matrix.build_type }} --output-on-failure
      
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.build_type }}-binaries
        path: ${{ github.workspace }}/build/bin/*