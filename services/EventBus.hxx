/**
 * @file EventBus.hxx
 * @copyright
 * Copyright 2025 LogosITO
 * Licensed under MIT-License
 *
 * @english
 * @brief Implementation of the central event bus (EventBus), acting as the ISubject.
 * @details This implementation provides a thread-safe Subject capable of managing observers
 * using smart pointers to prevent circular dependencies.
 *
 * @russian
 * @brief –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —à–∏–Ω—ã —Å–æ–±—ã—Ç–∏–π (EventBus), –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –∫–∞–∫ ISubject.
 * @details –≠—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π Subject, —Å–ø–æ—Å–æ–±–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è–º–∏
 * —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–º–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
 */
#pragma once

#include "Event.hxx"
#include "IObserver.hxx"
#include "ISubject.hxx"
#include <algorithm>
#include <vector>
#include <memory>
#include <mutex>

/**
 * @english
 * @namespace ConsoleColor
 * @brief Defines ANSI color codes for console output formatting.
 *
 * @russian
 * @namespace ConsoleColor
 * @brief –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.
 */
namespace ConsoleColor {
    const std::string RESET = "\033[0m";
    const std::string BLACK = "\033[30m";
    const std::string RED = "\033[31m";
    const std::string GREEN = "\033[32m";
    const std::string YELLOW = "\033[33m";
    const std::string BLUE = "\033[34m";
    const std::string MAGENTA = "\033[35m";
    const std::string CYAN = "\033[36m";
    const std::string WHITE = "\033[37m";
    const std::string BRIGHT_RED = "\033[91m";
    const std::string BRIGHT_GREEN = "\033[92m";
    const std::string BRIGHT_YELLOW = "\033[93m";
    const std::string BRIGHT_BLUE = "\033[94m";
    const std::string BRIGHT_MAGENTA = "\033[95m";
    const std::string BRIGHT_CYAN = "\033[96m";
    const std::string BRIGHT_WHITE = "\033[97m";

    const std::string BOLD = "\033[1m";
    const std::string DIM = "\033[2m";
    const std::string ITALIC = "\033[3m";
    const std::string UNDERLINE = "\033[4m";
}

/**
 * @english
 * @class EventBus
 * @brief A thread-safe implementation of ISubject for centralized event distribution.
 * @details This class uses std::weak_ptr to store observers, preventing circular dependencies
 * and ensuring automatic cleanup of destroyed observers. It inherits from
 * std::enable_shared_from_this to ensure that valid shared pointers to the bus
 * can be created even inside its member functions.
 *
 * @russian
 * @class EventBus
 * @brief –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ISubject –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.
 * @details –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç std::weak_ptr –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
 * –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π. –û–Ω –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç
 * std::enable_shared_from_this, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–µ –æ–±—â–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ —à–∏–Ω—É
 * –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –¥–∞–∂–µ –≤–Ω—É—Ç—Ä–∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π-—á–ª–µ–Ω–æ–≤.
 */
class EventBus : public ISubject, public std::enable_shared_from_this<EventBus> {
private:
    /**
     * @english
     * @brief Collection of registered observers.
     * @details Stored as weak pointers to prevent the EventBus from keeping observers alive indefinitely.
     *
     * @russian
     * @brief –ö–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π.
     * @details –•—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å–ª–∞–±—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π —à–∏–Ω–æ–π —Å–æ–±—ã—Ç–∏–π.
     */
    std::vector<std::weak_ptr<IObserver>> observers_;

    /**
     * @english
     * @brief Mutex to ensure thread-safe access to the observers_ vector.
     *
     * @russian
     * @brief –ú—å—é—Ç–µ–∫—Å –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–∫—Ç–æ—Ä—É observers_.
     */
    mutable std::mutex observers_mutex_;

    /**
     * @english
     * @brief Gets the console color for a specific event type.
     * @param type The event type.
     * @return ANSI color code string.
     *
     * @russian
     * @brief –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è.
     * @param type –¢–∏–ø —Å–æ–±—ã—Ç–∏—è.
     * @return –°—Ç—Ä–æ–∫–∞ —Å ANSI –∫–æ–¥–æ–º —Ü–≤–µ—Ç–∞.
     */
    static std::string getEventColor(Event::Type type) {
        switch (type) {
            case Event::REPOSITORY_INIT_SUCCESS:
                return ConsoleColor::BRIGHT_GREEN;
            case Event::SAVE_SUCCESS:
                return ConsoleColor::BRIGHT_GREEN;
            case Event::ERROR_MESSAGE:
                return ConsoleColor::BRIGHT_RED;
            case Event::WARNING_MESSAGE:
                return ConsoleColor::BRIGHT_YELLOW;
            case Event::GENERAL_INFO:
                return ConsoleColor::BRIGHT_CYAN;
            case Event::DEBUG_MESSAGE:
                return ConsoleColor::BRIGHT_BLUE;
            case Event::HELP_MESSAGE:
                return ConsoleColor::GREEN;
            case Event::PROTOCOL_START:
                return ConsoleColor::BRIGHT_MAGENTA;
            case Event::PROTOCOL_SUCCESS:
                return ConsoleColor::BRIGHT_GREEN;
            case Event::PROTOCOL_ERROR:
                return ConsoleColor::BRIGHT_RED;
            case Event::NETWORK_SEND:
                return ConsoleColor::BRIGHT_CYAN;
            case Event::NETWORK_RECEIVE:
                return ConsoleColor::BRIGHT_BLUE;
            case Event::OBJECT_TRANSFER:
                return ConsoleColor::BRIGHT_YELLOW;
            case Event::REFERENCE_UPDATE:
                return ConsoleColor::BRIGHT_GREEN;
            case Event::NEGOTIATION_PHASE:
                return ConsoleColor::BRIGHT_MAGENTA;
            default:
                return ConsoleColor::WHITE;
        }
    }

    /**
     * @english
     * @brief Gets the icon for a specific event type.
     * @param type The event type.
     * @return Icon string (emoji).
     *
     * @russian
     * @brief –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è.
     * @param type –¢–∏–ø —Å–æ–±—ã—Ç–∏—è.
     * @return –°—Ç—Ä–æ–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π (—ç–º–æ–¥–∑–∏).
     */
    static std::string getEventIcon(Event::Type type) {
        switch (type) {
            case Event::REPOSITORY_INIT_SUCCESS:
                return "‚úÖ";
            case Event::SAVE_SUCCESS:
                return "üíæ";
            case Event::ERROR_MESSAGE:
                return "‚ùå";
            case Event::WARNING_MESSAGE:
                return "‚ö†Ô∏è ";
            case Event::GENERAL_INFO:
                return "‚ÑπÔ∏è ";
            case Event::DEBUG_MESSAGE:
                return "üêõ";
            case Event::HELP_MESSAGE:
                return "üí°";
            case Event::PROTOCOL_START:
                return "üöÄ";
            case Event::PROTOCOL_SUCCESS:
                return "‚úÖ";
            case Event::PROTOCOL_ERROR:
                return "üí•";
            case Event::NETWORK_SEND:
                return "üì§";
            case Event::NETWORK_RECEIVE:
                return "üì•";
            case Event::OBJECT_TRANSFER:
                return "üì¶";
            case Event::REFERENCE_UPDATE:
                return "üîó";
            case Event::NEGOTIATION_PHASE:
                return "ü§ù";
            default:
                return "";
        }
    }

public:
    /**
     * @english
     * @brief Default virtual destructor.
     *
     * @russian
     * @brief –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
     */
    ~EventBus() override = default;

    /**
     * @english
     * @brief Registers a new Observer.
     * @details The observer's shared pointer is stored as a weak pointer internally.
     * @param observer The smart pointer to the Observer to be registered.
     *
     * @russian
     * @brief –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ Observer.
     * @details –û–±—â–∏–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å–ª–∞–±—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–∏.
     * @param observer –£–º–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ Observer –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
     */
    void attach(std::shared_ptr<IObserver> observer) override {
        std::lock_guard<std::mutex> lock(observers_mutex_);
        observers_.push_back(observer);
    }

    /**
     * @english
     * @brief Deregisters a specific Observer.
     * @details Compares the provided shared_ptr against all stored weak_ptr objects.
     * @param observer_to_remove The smart pointer to the Observer to be removed.
     *
     * @russian
     * @brief –û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Observer.
     * @details –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π shared_ptr —Å–æ –≤—Å–µ–º–∏ —Ö—Ä–∞–Ω–∏–º—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ weak_ptr.
     * @param observer_to_remove –£–º–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ Observer –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
     */
    void detach(std::shared_ptr<IObserver> observer_to_remove) override {
        std::lock_guard<std::mutex> lock(observers_mutex_);

        auto it = std::remove_if(observers_.begin(), observers_.end(),
            [&](const std::weak_ptr<IObserver>& weak_obs) {
                auto shared_obs = weak_obs.lock();
                return shared_obs && (shared_obs == observer_to_remove);
            }
        );
        observers_.erase(it, observers_.end());
    }

    /**
     * @english
     * @brief Sends an event to all active Observers.
     * @details Iterates over the list, safely locking each weak pointer before calling update().
     * Invalid (expired) weak pointers are effectively ignored.
     * @param event The constant reference to the Event to be published.
     *
     * @russian
     * @brief –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º Observers.
     * @details –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫, –±–µ–∑–æ–ø–∞—Å–Ω–æ –±–ª–æ–∫–∏—Ä—É—è –∫–∞–∂–¥—ã–π —Å–ª–∞–±—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º update().
     * –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ (–∏—Å—Ç–µ–∫—à–∏–µ) —Å–ª–∞–±—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
     * @param event –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
     */
    void notify(const Event& event) const override {
        std::string color = getEventColor(event.type);
        std::string icon = getEventIcon(event.type);
        std::string sourceColor = ConsoleColor::DIM + ConsoleColor::BLACK;

        // Format message with colors
        std::string formattedMessage = color + icon + " " + event.details +
                                      sourceColor + " [" + event.source_name + "]" +
                                      ConsoleColor::RESET;

        // Create event copy with formatted message
        Event coloredEvent = event;
        coloredEvent.details = formattedMessage;

        for (auto& observer : observers_) {
            observer.lock()->update(coloredEvent);
        }
    }
};