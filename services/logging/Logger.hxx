/**
 * @file Logger.hxx
 * @brief Defines the Logger class, a thread-safe Singleton that acts as an IObserver.
 *
 * The Logger centralizes system logging, handles log level filtering, and subscribes
 * to the Event Bus to automatically process system events.
 *
 * * @copyright 2025 LogosITO Under the MIT-License 
 */
#pragma once

#include "../IObserver.hxx"
#include "../Event.hxx"

#include <string>
#include <memory>
#include <unordered_map>
#include <mutex>

/**
 * @enum LogLevel
 * @brief Defines the severity levels for log messages.
 * * Used for filtering output based on the configured level.
 */
enum class LogLevel {
    DEBUG = 0, ///< Detailed information for debugging.
    INFO = 1,  ///< General flow information.
    WARN = 2,  ///< Potentially harmful situations.
    ERROR = 3, ///< Error events that might still allow the application to continue.
    FATAL = 4  ///< Very severe error events that will likely cause the application to abort.
};

/**
 * @class Logger
 * @brief A thread-safe Singleton class responsible for logging system events.
 *
 * Implements the IObserver interface to automatically receive and process events
 * generated by commands and core components.
 */
class Logger : public IObserver {
private:
    /**
     * @brief The unique name of the logger instance (e.g., "VCS.CLI").
     */
    std::string name_;
    
    /**
     * @brief The minimum log level to output. Messages below this level are discarded.
     */
    LogLevel log_level_;
    
    /**
     * @brief The formatting pattern for log output.
     */
    std::string pattern_;
    
    /**
     * @brief Static map to hold all named Singleton instances of the Logger.
     */
    static std::unordered_map<std::string, std::shared_ptr<Logger>> instances_;
    
    /**
     * @brief Mutex to ensure thread-safe access to the static instances_ map.
     */
    static std::mutex instances_mutex_;

public:
    /**
     * @brief Constructor.
     * * Private/protected access is typically enforced in the Singleton implementation file.
     * @param name The unique name for this logger instance.
     */
    explicit Logger(const std::string& name);
    
    /**
     * @brief Destructor.
     */
    ~Logger() override;
    
    // -------------------------------------------------------------------------
    // IObserver Methods
    // -------------------------------------------------------------------------

    /**
     * @brief Method called by the Subject to notify the observer with an event.
     * * Maps the Event::Type to a LogLevel and processes the message.
     * @param event The Event structure containing the notification data.
     */
    void update(const Event& event) override;
    
    /**
     * @brief Method called by the subject to notify the observer.
     * @param event The Event structure containing the notification data.
     * @deprecated Note: This method is likely redundant with update(const Event& event) 
     * based on the IObserver definition. It should ideally map to the same logic as `update`.
     */
    void notify(const Event& event) override;
    
    // -------------------------------------------------------------------------
    // Static Singleton Access Methods
    // -------------------------------------------------------------------------

    /**
     * @brief Retrieves the Singleton instance of the Logger for the given name.
     * * Creates and registers a new instance if one does not already exist.
     * @param name The name of the desired logger instance.
     * @return A shared pointer to the Logger instance.
     */
    static std::shared_ptr<Logger> getInstance(const std::string& name);
    
    /**
     * @brief Clears all registered Singleton instances.
     * * Used primarily for cleanup in testing environments.
     */
    static void clearInstances();
    
    // -------------------------------------------------------------------------
    // Direct Logging Methods
    // -------------------------------------------------------------------------

    /**
     * @brief Logs a message at the DEBUG level.
     * @param message The content of the log message.
     */
    void debug(const std::string& message);
    
    /**
     * @brief Logs a message at the INFO level.
     * @param message The content of the log message.
     */
    void info(const std::string& message);
    
    /**
     * @brief Logs a message at the WARN level.
     * @param message The content of the log message.
     */
    void warn(const std::string& message);
    
    /**
     * @brief Logs a message at the ERROR level.
     * @param message The content of the log message.
     */
    void error(const std::string& message);
    
    /**
     * @brief Logs a message at the FATAL level.
     * @param message The content of the log message.
     */
    void fatal(const std::string& message);
    
    // -------------------------------------------------------------------------
    // Configuration & Utility
    // -------------------------------------------------------------------------

    /**
     * @brief Sets the minimum log level for this instance.
     * @param level The new LogLevel.
     */
    void setLevel(LogLevel level);
    
    /**
     * @brief Retrieves the current minimum log level.
     * @return The current LogLevel.
     */
    [[nodiscard]] LogLevel getLevel() const;
    
    /**
     * @brief Sets the output formatting pattern for messages.
     * @param pattern The new format string (implementation details depend on pattern syntax).
     */
    void setPattern(const std::string& pattern);
    
    /**
     * @brief Forces all buffered log output to be written immediately (e.g., to disk).
     */
    void flush();
    
private:
    /**
     * @brief The core logging function, applies filtering and delegates to formatting.
     * @param level The level of the current message.
     * @param message The content of the message.
     */
    void log(LogLevel level, const std::string& message);
    
    /**
     * @brief Applies the configured pattern to the message components.
     * @param level The level of the message.
     * @param message The raw message content.
     * @return The fully formatted output string.
     */
    std::string formatMessage(LogLevel level, const std::string& message);
    
    /**
     * @brief Converts a LogLevel enum value to its string representation.
     * @param level The LogLevel value.
     * @return The corresponding string (e.g., "DEBUG", "ERROR").
     */
    std::string levelToString(LogLevel level);
};