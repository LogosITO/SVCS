/**
 * @file Logger.hxx
 * @copyright
 * Copyright 2025 LogosITO
 * Licensed under MIT-License
 *
 * @english
 * @brief Defines the Logger class, a thread-safe Singleton that acts as an IObserver.
 * @details The Logger centralizes system logging, handles log level filtering, and subscribes
 * to the Event Bus to automatically process system events.
 *
 * @russian
 * @brief Определяет класс Logger, потокобезопасный Singleton, который действует как IObserver.
 * @details Logger централизует системное логирование, обрабатывает фильтрацию уровней логов и подписывается
 * на шину событий для автоматической обработки системных событий.
 */
#pragma once

#include "../IObserver.hxx"
#include "../Event.hxx"

#include <string>
#include <memory>
#include <unordered_map>
#include <mutex>

/**
 * @english
 * @enum LogLevel
 * @brief Defines the severity levels for log messages.
 * @details Used for filtering output based on the configured level.
 *
 * @russian
 * @enum LogLevel
 * @brief Определяет уровни серьезности для лог-сообщений.
 * @details Используется для фильтрации вывода на основе настроенного уровня.
 */
enum class LogLevel {
    /**
     * @english
     * @brief Detailed information for debugging.
     *
     * @russian
     * @brief Подробная информация для отладки.
     */
    DEBUG = 0,

    /**
     * @english
     * @brief General flow information.
     *
     * @russian
     * @brief Общая информация о потоке выполнения.
     */
    INFO = 1,

    /**
     * @english
     * @brief Potentially harmful situations.
     *
     * @russian
     * @brief Потенциально проблемные ситуации.
     */
    WARN = 2,

    /**
     * @english
     * @brief Error events that might still allow the application to continue.
     *
     * @russian
     * @brief События ошибок, которые могут позволить приложению продолжить работу.
     */
    ERROR = 3,

    /**
     * @english
     * @brief Very severe error events that will likely cause the application to abort.
     *
     * @russian
     * @brief Очень серьезные события ошибок, которые, вероятно, приведут к прерыванию работы приложения.
     */
    FATAL = 4
};

/**
 * @english
 * @class Logger
 * @brief A thread-safe Singleton class responsible for logging system events.
 * @details Implements the IObserver interface to automatically receive and process events
 * generated by commands and core components.
 *
 * @russian
 * @class Logger
 * @brief Потокобезопасный Singleton класс, отвечающий за логирование системных событий.
 * @details Реализует интерфейс IObserver для автоматического получения и обработки событий,
 * сгенерированных командами и основными компонентами.
 */
class Logger : public IObserver {
private:
    /**
     * @english
     * @brief The unique name of the logger instance (e.g., "VCS.CLI").
     *
     * @russian
     * @brief Уникальное имя экземпляра логгера (например, "VCS.CLI").
     */
    std::string name_;

    /**
     * @english
     * @brief The minimum log level to output. Messages below this level are discarded.
     *
     * @russian
     * @brief Минимальный уровень логов для вывода. Сообщения ниже этого уровня отбрасываются.
     */
    LogLevel log_level_;

    /**
     * @english
     * @brief The formatting pattern for log output.
     *
     * @russian
     * @brief Шаблон форматирования для вывода логов.
     */
    std::string pattern_;

    /**
     * @english
     * @brief Static map to hold all named Singleton instances of the Logger.
     *
     * @russian
     * @brief Статическая карта для хранения всех именованных Singleton экземпляров Logger.
     */
    static std::unordered_map<std::string, std::shared_ptr<Logger>> instances_;

    /**
     * @english
     * @brief Mutex to ensure thread-safe access to the static instances_ map.
     *
     * @russian
     * @brief Мьютекс для обеспечения потокобезопасного доступа к статической карте instances_.
     */
    static std::mutex instances_mutex_;

public:
    /**
     * @english
     * @brief Constructor.
     * @details Private/protected access is typically enforced in the Singleton implementation file.
     * @param name The unique name for this logger instance.
     *
     * @russian
     * @brief Конструктор.
     * @details Приватный/защищенный доступ обычно обеспечивается в файле реализации Singleton.
     * @param name Уникальное имя для этого экземпляра логгера.
     */
    explicit Logger(const std::string& name);

    /**
     * @english
     * @brief Destructor.
     *
     * @russian
     * @brief Деструктор.
     */
    ~Logger() override;

    // -------------------------------------------------------------------------
    // IObserver Methods
    // -------------------------------------------------------------------------

    /**
     * @english
     * @brief Method called by the Subject to notify the observer with an event.
     * @details Maps the Event::Type to a LogLevel and processes the message.
     * @param event The Event structure containing the notification data.
     *
     * @russian
     * @brief Метод, вызываемый Subject для уведомления наблюдателя событием.
     * @details Сопоставляет Event::Type с LogLevel и обрабатывает сообщение.
     * @param event Структура Event, содержащая данные уведомления.
     */
    void update(const Event& event) override;

    /**
     * @english
     * @brief Method called by the subject to notify the observer.
     * @param event The Event structure containing the notification data.
     * @deprecated Note: This method is likely redundant with update(const Event& event)
     * based on the IObserver definition. It should ideally map to the same logic as `update`.
     *
     * @russian
     * @brief Метод, вызываемый subject для уведомления наблюдателя.
     * @param event Структура Event, содержащая данные уведомления.
     * @deprecated Примечание: Этот метод, вероятно, избыточен с update(const Event& event)
     * на основе определения IObserver. В идеале он должен соответствовать той же логике, что и `update`.
     */
    void notify(const Event& event) override;

    // -------------------------------------------------------------------------
    // Static Singleton Access Methods
    // -------------------------------------------------------------------------

    /**
     * @english
     * @brief Retrieves the Singleton instance of the Logger for the given name.
     * @details Creates and registers a new instance if one does not already exist.
     * @param name The name of the desired logger instance.
     * @return A shared pointer to the Logger instance.
     *
     * @russian
     * @brief Получает Singleton экземпляр Logger для заданного имени.
     * @details Создает и регистрирует новый экземпляр, если он еще не существует.
     * @param name Имя желаемого экземпляра логгера.
     * @return Общий указатель на экземпляр Logger.
     */
    static std::shared_ptr<Logger> getInstance(const std::string& name);

    /**
     * @english
     * @brief Clears all registered Singleton instances.
     * @details Used primarily for cleanup in testing environments.
     *
     * @russian
     * @brief Очищает все зарегистрированные Singleton экземпляры.
     * @details Используется в основном для очистки в тестовых средах.
     */
    static void clearInstances();

    // -------------------------------------------------------------------------
    // Direct Logging Methods
    // -------------------------------------------------------------------------

    /**
     * @english
     * @brief Logs a message at the DEBUG level.
     * @param message The content of the log message.
     *
     * @russian
     * @brief Логирует сообщение на уровне DEBUG.
     * @param message Содержимое лог-сообщения.
     */
    void debug(const std::string& message);

    /**
     * @english
     * @brief Logs a message at the INFO level.
     * @param message The content of the log message.
     *
     * @russian
     * @brief Логирует сообщение на уровне INFO.
     * @param message Содержимое лог-сообщения.
     */
    void info(const std::string& message);

    /**
     * @english
     * @brief Logs a message at the WARN level.
     * @param message The content of the log message.
     *
     * @russian
     * @brief Логирует сообщение на уровне WARN.
     * @param message Содержимое лог-сообщения.
     */
    void warn(const std::string& message);

    /**
     * @english
     * @brief Logs a message at the ERROR level.
     * @param message The content of the log message.
     *
     * @russian
     * @brief Логирует сообщение на уровне ERROR.
     * @param message Содержимое лог-сообщения.
     */
    void error(const std::string& message);

    /**
     * @english
     * @brief Logs a message at the FATAL level.
     * @param message The content of the log message.
     *
     * @russian
     * @brief Логирует сообщение на уровне FATAL.
     * @param message Содержимое лог-сообщения.
     */
    void fatal(const std::string& message);

    // -------------------------------------------------------------------------
    // Configuration & Utility
    // -------------------------------------------------------------------------

    /**
     * @english
     * @brief Sets the minimum log level for this instance.
     * @param level The new LogLevel.
     *
     * @russian
     * @brief Устанавливает минимальный уровень логов для этого экземпляра.
     * @param level Новый LogLevel.
     */
    void setLevel(LogLevel level);

    /**
     * @english
     * @brief Retrieves the current minimum log level.
     * @return The current LogLevel.
     *
     * @russian
     * @brief Получает текущий минимальный уровень логов.
     * @return Текущий LogLevel.
     */
    [[nodiscard]] LogLevel getLevel() const;

    /**
     * @english
     * @brief Sets the output formatting pattern for messages.
     * @param pattern The new format string (implementation details depend on pattern syntax).
     *
     * @russian
     * @brief Устанавливает шаблон форматирования вывода для сообщений.
     * @param pattern Новая строка формата (детали реализации зависят от синтаксиса шаблона).
     */
    void setPattern(const std::string& pattern);

    /**
     * @english
     * @brief Forces all buffered log output to be written immediately (e.g., to disk).
     *
     * @russian
     * @brief Принудительно записывает весь буферизованный вывод логов немедленно (например, на диск).
     */
    void flush();

private:
    /**
     * @english
     * @brief The core logging function, applies filtering and delegates to formatting.
     * @param level The level of the current message.
     * @param message The content of the message.
     *
     * @russian
     * @brief Основная функция логирования, применяет фильтрацию и делегирует форматирование.
     * @param level Уровень текущего сообщения.
     * @param message Содержимое сообщения.
     */
    void log(LogLevel level, const std::string& message);

    /**
     * @english
     * @brief Applies the configured pattern to the message components.
     * @param level The level of the message.
     * @param message The raw message content.
     * @return The fully formatted output string.
     *
     * @russian
     * @brief Применяет настроенный шаблон к компонентам сообщения.
     * @param level Уровень сообщения.
     * @param message Необработанное содержимое сообщения.
     * @return Полностью отформатированная строка вывода.
     */
    std::string formatMessage(LogLevel level, const std::string& message);

    /**
     * @english
     * @brief Converts a LogLevel enum value to its string representation.
     * @param level The LogLevel value.
     * @return The corresponding string (e.g., "DEBUG", "ERROR").
     *
     * @russian
     * @brief Преобразует значение перечисления LogLevel в его строковое представление.
     * @param level Значение LogLevel.
     * @return Соответствующая строка (например, "DEBUG", "ERROR").
     */
    std::string levelToString(LogLevel level);
};